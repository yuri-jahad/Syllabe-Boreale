/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './__root'
import { Route as DashboardRouteImport } from './dashboard'
import { Route as IndexRouteImport } from './index'
import { Route as ProtectedHomeRouteImport } from './protected/home'
import { Route as DashboardWordFinderRouteImport } from './dashboard/word-finder'
import { Route as DashboardSettingsRouteImport } from './dashboard/settings'
import { Route as DashboardManagementRouteImport } from './dashboard/management'
import { Route as DashboardChartRouteImport } from './dashboard/chart'

const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedHomeRoute = ProtectedHomeRouteImport.update({
  id: '/protected/home',
  path: '/protected/home',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardWordFinderRoute = DashboardWordFinderRouteImport.update({
  id: '/word-finder',
  path: '/word-finder',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardSettingsRoute = DashboardSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardManagementRoute = DashboardManagementRouteImport.update({
  id: '/management',
  path: '/management',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardChartRoute = DashboardChartRouteImport.update({
  id: '/chart',
  path: '/chart',
  getParentRoute: () => DashboardRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/chart': typeof DashboardChartRoute
  '/dashboard/management': typeof DashboardManagementRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/word-finder': typeof DashboardWordFinderRoute
  '/protected/home': typeof ProtectedHomeRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/chart': typeof DashboardChartRoute
  '/dashboard/management': typeof DashboardManagementRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/word-finder': typeof DashboardWordFinderRoute
  '/protected/home': typeof ProtectedHomeRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/chart': typeof DashboardChartRoute
  '/dashboard/management': typeof DashboardManagementRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/word-finder': typeof DashboardWordFinderRoute
  '/protected/home': typeof ProtectedHomeRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/chart'
    | '/dashboard/management'
    | '/dashboard/settings'
    | '/dashboard/word-finder'
    | '/protected/home'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/dashboard/chart'
    | '/dashboard/management'
    | '/dashboard/settings'
    | '/dashboard/word-finder'
    | '/protected/home'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/chart'
    | '/dashboard/management'
    | '/dashboard/settings'
    | '/dashboard/word-finder'
    | '/protected/home'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  ProtectedHomeRoute: typeof ProtectedHomeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/chart': {
      id: '/dashboard/chart'
      path: '/chart'
      fullPath: '/dashboard/chart'
      preLoaderRoute: typeof DashboardChartRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/management': {
      id: '/dashboard/management'
      path: '/management'
      fullPath: '/dashboard/management'
      preLoaderRoute: typeof DashboardManagementRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/word-finder': {
      id: '/dashboard/word-finder'
      path: '/word-finder'
      fullPath: '/dashboard/word-finder'
      preLoaderRoute: typeof DashboardWordFinderRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/protected/home': {
      id: '/protected/home'
      path: '/protected/home'
      fullPath: '/protected/home'
      preLoaderRoute: typeof ProtectedHomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/routeTree/gen': {
      id: '/routeTree/gen'
      path: ''
      fullPath: '/routeTree/gen'
      preLoaderRoute: unknown
      parentRoute: typeof rootRouteImport
    }
  }
}

interface DashboardRouteChildren {
  DashboardChartRoute: typeof DashboardChartRoute
  DashboardManagementRoute: typeof DashboardManagementRoute
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardWordFinderRoute: typeof DashboardWordFinderRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardChartRoute: DashboardChartRoute,
  DashboardManagementRoute: DashboardManagementRoute,
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardWordFinderRoute: DashboardWordFinderRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  ProtectedHomeRoute: ProtectedHomeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
