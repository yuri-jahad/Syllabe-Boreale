/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../__root'
import { Route as ProtectedRouteImport } from './../protected'
import { Route as IndexRouteImport } from './../index'
import { Route as DashboardWordFinderRouteImport } from './../dashboard/word-finder'
import { Route as DashboardSettingsRouteImport } from './../dashboard/settings'
import { Route as DashboardManagementRouteImport } from './../dashboard/management'
import { Route as DashboardChartRouteImport } from './../dashboard/chart'

const ProtectedRoute = ProtectedRouteImport.update({
  id: '/protected',
  path: '/protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardWordFinderRoute = DashboardWordFinderRouteImport.update({
  id: '/dashboard/word-finder',
  path: '/dashboard/word-finder',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardSettingsRoute = DashboardSettingsRouteImport.update({
  id: '/dashboard/settings',
  path: '/dashboard/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardManagementRoute = DashboardManagementRouteImport.update({
  id: '/dashboard/management',
  path: '/dashboard/management',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardChartRoute = DashboardChartRouteImport.update({
  id: '/dashboard/chart',
  path: '/dashboard/chart',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/protected': typeof ProtectedRoute
  '/dashboard/chart': typeof DashboardChartRoute
  '/dashboard/management': typeof DashboardManagementRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/word-finder': typeof DashboardWordFinderRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/protected': typeof ProtectedRoute
  '/dashboard/chart': typeof DashboardChartRoute
  '/dashboard/management': typeof DashboardManagementRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/word-finder': typeof DashboardWordFinderRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/protected': typeof ProtectedRoute
  '/dashboard/chart': typeof DashboardChartRoute
  '/dashboard/management': typeof DashboardManagementRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/word-finder': typeof DashboardWordFinderRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/protected'
    | '/dashboard/chart'
    | '/dashboard/management'
    | '/dashboard/settings'
    | '/dashboard/word-finder'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/protected'
    | '/dashboard/chart'
    | '/dashboard/management'
    | '/dashboard/settings'
    | '/dashboard/word-finder'
  id:
    | '__root__'
    | '/'
    | '/protected'
    | '/dashboard/chart'
    | '/dashboard/management'
    | '/dashboard/settings'
    | '/dashboard/word-finder'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRoute
  DashboardChartRoute: typeof DashboardChartRoute
  DashboardManagementRoute: typeof DashboardManagementRoute
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardWordFinderRoute: typeof DashboardWordFinderRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/protected': {
      id: '/protected'
      path: '/protected'
      fullPath: '/protected'
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/chart': {
      id: '/dashboard/chart'
      path: '/dashboard/chart'
      fullPath: '/dashboard/chart'
      preLoaderRoute: typeof DashboardChartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/management': {
      id: '/dashboard/management'
      path: '/dashboard/management'
      fullPath: '/dashboard/management'
      preLoaderRoute: typeof DashboardManagementRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/dashboard/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/word-finder': {
      id: '/dashboard/word-finder'
      path: '/dashboard/word-finder'
      fullPath: '/dashboard/word-finder'
      preLoaderRoute: typeof DashboardWordFinderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/routeTree/gen': {
      id: '/routeTree/gen'
      path: ''
      fullPath: '/routeTree/gen'
      preLoaderRoute: unknown
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRoute,
  DashboardChartRoute: DashboardChartRoute,
  DashboardManagementRoute: DashboardManagementRoute,
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardWordFinderRoute: DashboardWordFinderRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
